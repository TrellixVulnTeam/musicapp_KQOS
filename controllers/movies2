const Joi = require('joi');
const Movie = require('../models/movies');
const asyncWrapper = require('../middleware/async');

const movies=[
    {id:1,name:'Superman'},
    {id:2,name:'Iron man'},
    {id:3,name:'Infinity War'}
];

const getAllMovies = async (req,res) => {
    const movies = await Movie.find({});
    res.status(201).json({movies});

}

const AddMovie = asyncWrapper(async (req,res) => {
    const movie = await Movie.create(req.body)
    res.status(201).json({movie});
 
})

const editMovie = asyncWrapper(async (req,res) => {
    
        const {id : movieID} = req.params
        const movie = await Movie.findOneAndUpdate({_id:movieID},req.body,{new:true,
            runValidators:true});

          if(!movie) return res.status(404).json({msg : `No movie with id : ${id}`});

        res.status(200).json({id: movieID, data:req.body})
    
})

const getMovie = asyncWrapper(async (req,res) => {
   const {id:movieID} = req.params;
   const movie = await Movie.findOne({_id:movieID});

        if(!movie) return res.status(404).json({msg : `No movie with id : ${id}`});

   res.status(200).json({movie});
   
//     const movie = movies.find(m => m.id === parseInt(req.params.id));
//     if(!movie) return res.status(404).send("Movie not found.");
    
//     const {error}= validateMovie(movie);
//     if (error) return  res.status(404).send(error.details[0].message);
    
//    // movie.name=req.body.name;
//     res.send(movie);


})

const deleteMovie = asyncWrapper(async (req,res) => {
    const {id:movieID} = req.params;
    const movie = await Movie.findOneAndDelete({_id:movieID});

    if(!movie) return res.status(404).json({msg : `No movie with id : ${id}`});

    res.status(200).json({movie});


})

function validateMovie(movie){
    const schema = {
        name : Joi.string().min(5).required(),
        id : Joi.required()
    };
    
    const result = Joi.validate(movie, schema);
    
    return result;
    }

module.exports = {
    getAllMovies,
    AddMovie,
    getMovie,
    editMovie,
    deleteMovie
}